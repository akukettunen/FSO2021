{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}","map":{"version":3,"sources":["/Users/akukettunen/node_modules/graphql/language/blockString.mjs"],"names":["dedentBlockStringValue","rawString","lines","split","commonIndent","i","length","line","indent","leadingWhitespace","_i","slice","isBlank","shift","pop","join","str","printBlockString","value","indentation","arguments","undefined","preferMultipleLines","isSingleLine","indexOf","hasLeadingSpace","hasTrailingQuote","printAsMultipleLines","result","replace"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}"]},"metadata":{},"sourceType":"module"}