{"ast":null,"code":"var _jsxFileName = \"/Users/akukettunen/Desktop/FS2021/osa7/bloglist-extended/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Blog from './components/Blog';\nimport Notification from './components/Notification';\nimport blogService from './services/blogs';\nimport Toggleable from './components/Toggleable';\nimport BlogForm from './components/BlogForm';\nimport loginService from './services/login';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showNotification } from './reducers/notificationReducer';\nimport { initBlogs, addBlog, like } from './reducers/blogReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // const [blogs, setBlogs] = useState([])\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const toggleableRef = useRef();\n  const dispatch = useDispatch();\n  const blogs = useSelector(state => state.blogs);\n  useEffect(() => {\n    dispatch(initBlogs());\n  }, []);\n\n  const notification = async ({\n    type,\n    text,\n    duration\n  }) => {\n    dispatch(showNotification({\n      type,\n      text,\n      duration,\n      visible: true\n    }));\n  };\n\n  const logout = () => {\n    window.localStorage.removeItem('blogUser');\n    blogService.setToken(null);\n    setUser(null);\n    notification({\n      type: 'success',\n      text: 'logged out'\n    });\n  };\n\n  const login = () => {\n    loginService.login({\n      username,\n      password\n    }).then(e => {\n      setUser(e.data);\n      setUsername('');\n      setPassword('');\n      window.localStorage.setItem('blogUser', JSON.stringify(e.data));\n      blogService.setToken(e.data.token);\n      notification({\n        type: 'success',\n        text: 'kirjautuminen onnistui!'\n      });\n    }).catch(e => {\n      notification({\n        type: 'alert',\n        text: e.response.data.error\n      });\n    });\n  };\n\n  const newBlog = ({\n    e,\n    blogAuthor,\n    blogTitle,\n    blogUrl\n  }) => {\n    e.preventDefault();\n    dispatch(addBlog({\n      author: blogAuthor,\n      title: blogTitle,\n      url: blogUrl\n    }));\n    toggleableRef.current.toggleVisibility();\n  };\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('blogUser');\n\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n    }\n  }, []);\n\n  const liked = blog => {\n    dispatch(like(blog));\n  };\n\n  const deleted = id => {\n    blogService.deleteBlog(id).then(() => {\n      // let new_blogs = blogs.filter(e => e.id !== id)\n      // setBlogs(new_blogs)\n      notification({\n        type: 'success',\n        text: 'Poistettu!'\n      });\n    }).catch(e => {\n      console.log(e);\n      notification({\n        type: 'alert',\n        text: 'Poistaminen meni pieleen!'\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"blogs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), !user && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        value: username,\n        onChange: ({\n          target\n        }) => setUsername(target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 106\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"password\",\n        type: \"password\",\n        value: password,\n        onChange: ({\n          target\n        }) => setPassword(target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"loginButton\",\n        onClick: login,\n        children: \"login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), user && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [user.username, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logout,\n        children: \"logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(Toggleable, {\n        buttonLabel: \"show form\",\n        ref: toggleableRef,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            'marginBottom': '30px'\n          },\n          children: /*#__PURE__*/_jsxDEV(BlogForm, {\n            addBlog: newBlog\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }, this), [...blogs].sort((a, b) => {\n        return b.likes - a.likes;\n      }).map(blog => /*#__PURE__*/_jsxDEV(Blog, {\n        blog: blog,\n        liked: () => liked(blog),\n        deleted: () => deleted(blog.id)\n      }, blog.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }, this))]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"vz9TwTRQ/hNt/3ERypG9lXcayik=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/akukettunen/Desktop/FS2021/osa7/bloglist-extended/src/App.js"],"names":["React","useState","useEffect","useRef","Blog","Notification","blogService","Toggleable","BlogForm","loginService","useDispatch","useSelector","showNotification","initBlogs","addBlog","like","App","username","setUsername","password","setPassword","user","setUser","toggleableRef","dispatch","blogs","state","notification","type","text","duration","visible","logout","window","localStorage","removeItem","setToken","login","then","e","data","setItem","JSON","stringify","token","catch","response","error","newBlog","blogAuthor","blogTitle","blogUrl","preventDefault","author","title","url","current","toggleVisibility","loggedUserJSON","getItem","parse","liked","blog","deleted","id","deleteBlog","console","log","target","value","sort","a","b","likes","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Blog from './components/Blog'\nimport Notification from './components/Notification'\nimport blogService from './services/blogs'\nimport Toggleable from './components/Toggleable'\nimport BlogForm from './components/BlogForm'\nimport loginService from './services/login'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { showNotification } from './reducers/notificationReducer'\nimport { initBlogs, addBlog, like } from './reducers/blogReducer'\n\nconst App = () => {\n  // const [blogs, setBlogs] = useState([])\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const toggleableRef = useRef()\n  const dispatch = useDispatch()\n  const blogs = useSelector(state => state.blogs)\n\n  useEffect(() => {\n    dispatch(initBlogs())\n  }, [])\n\n  const notification = async ({ type, text, duration }) => {\n    dispatch(showNotification({ type, text, duration, visible: true }))\n  }\n\n  const logout = () => {\n    window.localStorage.removeItem('blogUser')\n    blogService.setToken(null)\n    setUser(null)\n    notification({ type: 'success', text: 'logged out' })\n  }\n\n  const login = () => {\n    loginService.login({ username, password })\n      .then(e => {\n        setUser(e.data)\n        setUsername('')\n        setPassword('')\n        window.localStorage.setItem('blogUser', JSON.stringify(e.data))\n        blogService.setToken(e.data.token)\n        notification({ type: 'success', text: 'kirjautuminen onnistui!' })\n      })\n      .catch(e => {\n        notification({ type: 'alert', text: e.response.data.error })\n      })\n  }\n\n  const newBlog = ({ e, blogAuthor, blogTitle, blogUrl }) => {\n    e.preventDefault()\n    dispatch(addBlog({ author: blogAuthor, title: blogTitle, url: blogUrl }))\n\n    toggleableRef.current.toggleVisibility()\n  }\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('blogUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n  const liked = blog => {\n    dispatch(like(blog))\n  }\n\n  const deleted = id => {\n    blogService.deleteBlog(id)\n      .then(() => {\n        // let new_blogs = blogs.filter(e => e.id !== id)\n        // setBlogs(new_blogs)\n        notification({ type: 'success', text: 'Poistettu!' })\n      })\n      .catch((e) => {\n        console.log(e)\n        notification({ type: 'alert', text: 'Poistaminen meni pieleen!' })\n      })\n  }\n\n\n  return (\n    <div>\n      <h2>blogs</h2>\n      {\n        !user &&\n          <div>\n            <h4>login</h4>\n\n            <input id=\"username\" value={username} onChange={({ target }) => setUsername(target.value)} /><br></br>\n            <input id=\"password\" type=\"password\" value={password} onChange={({ target }) => setPassword(target.value)} />\n            <button id=\"loginButton\" onClick={login}>login</button>\n          </div>\n      }\n      {\n        <Notification></Notification>\n      }\n      {\n        user &&\n            <>\n              { user.username } <button onClick={logout}>logout</button>\n              <Toggleable buttonLabel=\"show form\" ref={toggleableRef}>\n                <div style={{ 'marginBottom': '30px' }}>\n                  <BlogForm addBlog={newBlog}></BlogForm>\n                </div>\n              </Toggleable>\n              {\n                [...blogs].sort((a, b) => {return b.likes - a.likes}).map(blog =>\n                  <Blog key={blog.id} blog={ blog } liked={() => liked(blog)} deleted={() => deleted(blog.id)} />\n                )\n              }\n            </>\n      }\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}