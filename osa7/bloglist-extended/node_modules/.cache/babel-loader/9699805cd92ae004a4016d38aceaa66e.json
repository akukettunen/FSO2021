{"ast":null,"code":"import blogService from '../services/blogs';\nimport { showNotification } from './notificationReducer';\n\nconst reducer = (state = [], action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      return action.data;\n\n    default:\n      return state;\n  }\n};\n\nexport const loginUser = user => {\n  return async dispatch => {\n    loginService.login(user).then(e => {\n      dispatch({\n        type: 'LOGIN',\n        data: e.data\n      });\n      window.localStorage.setItem('blogUser', JSON.stringify(e.data));\n      blogService.setToken(e.data.token);\n      dispatch(showNotification({\n        type: 'success',\n        text: 'kirjautuminen onnistui!',\n        duration: 5000,\n        visible: true\n      }));\n    }).catch(e => {\n      dispatch(showNotification({\n        type: 'alert',\n        text: e.response.data.error,\n        duration: 5000,\n        visible: true\n      }));\n    });\n  };\n};\nexport const like = blog => {\n  return async dispatch => {\n    blogService.put({ ...blog,\n      likes: blog.likes + 1\n    }).then(() => {\n      dispatch({\n        type: 'LIKE',\n        data: {\n          id: blog.id\n        }\n      });\n      dispatch(showNotification({\n        type: 'success',\n        text: 'Tykätty!',\n        duration: 5000,\n        visible: true\n      }));\n    }).catch(() => {\n      dispatch(showNotification({\n        type: 'alert',\n        text: 'Tykkääminen meni pieleen!',\n        duration: 5000,\n        visible: true\n      }));\n    });\n  };\n};\nexport const deleteBlog = id => {\n  return async dispatch => {\n    blogService.deleteBlog(id).then(() => {\n      // let new_blogs = blogs.filter(e => e.id !== id)\n      // setBlogs(new_blogs)\n      dispatch({\n        type: 'LIKE',\n        data: {\n          id\n        }\n      });\n      dispatch(showNotification({\n        type: 'success',\n        text: 'Poistettu!',\n        duration: 5000,\n        visible: true\n      }));\n    }).catch(() => {\n      dispatch(showNotification({\n        type: 'alert',\n        text: 'Poistaminen meni pieleen!',\n        duration: 5000,\n        visible: true\n      }));\n    });\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    blogService.getAll().then(blogs => {\n      dispatch({\n        type: 'INIT',\n        data: blogs\n      });\n    });\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/akukettunen/Desktop/FS2021/osa7/bloglist-extended/src/reducers/userReducer.js"],"names":["blogService","showNotification","reducer","state","action","type","data","loginUser","user","dispatch","loginService","login","then","e","window","localStorage","setItem","JSON","stringify","setToken","token","text","duration","visible","catch","response","error","like","blog","put","likes","id","deleteBlog","initBlogs","getAll","blogs"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\nimport { showNotification } from './notificationReducer'\n\nconst reducer = (state = [], action) => {\n  switch(action.type) {\n    case 'LOGIN':\n      return action.data\n    default:\n\n    return state\n  }\n}\n\nexport const loginUser = (user) => {\n  return async dispatch => {\n    loginService.login(user)\n      .then(e => {\n        dispatch({\n          type: 'LOGIN',\n          data: e.data\n        })\n\n        window.localStorage.setItem('blogUser', JSON.stringify(e.data))\n        blogService.setToken(e.data.token)\n\n        dispatch(showNotification({ type: 'success', text: 'kirjautuminen onnistui!', duration: 5000, visible: true }))\n      })\n      .catch(e => {\n        dispatch(showNotification({ type: 'alert', text: e.response.data.error, duration: 5000, visible: true }))\n      })\n  }\n}\n\nexport const like = (blog) => {\n  return async dispatch => {\n    blogService.put({ ...blog, likes: blog.likes + 1 })\n      .then(() => {\n        dispatch({\n          type: 'LIKE',\n          data: { id: blog.id }\n        })\n\n        dispatch(showNotification({ type: 'success', text: 'Tykätty!', duration: 5000, visible: true }))\n      })\n      .catch(() => {\n        dispatch(showNotification({ type: 'alert', text: 'Tykkääminen meni pieleen!', duration: 5000, visible: true  }))\n      })\n\n  }\n}\n\nexport const deleteBlog = (id) => {\n  return async dispatch => {\n    blogService.deleteBlog(id)\n      .then(() => {\n        // let new_blogs = blogs.filter(e => e.id !== id)\n        // setBlogs(new_blogs)\n        dispatch({\n          type: 'LIKE',\n          data: { id }\n        })\n        dispatch(showNotification({ type: 'success', text: 'Poistettu!', duration: 5000, visible: true }))\n      })\n      .catch(() => {\n        dispatch(showNotification({ type: 'alert', text: 'Poistaminen meni pieleen!', duration: 5000, visible: true  }))\n      })\n  }\n}\n\nexport const initBlogs = () => {\n  return async dispatch => {\n    blogService.getAll().then(blogs => {\n      dispatch({\n        type: 'INIT',\n        data: blogs\n      })\n    })\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}