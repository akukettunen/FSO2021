{"ast":null,"code":"import blogService from '../services/blogs';\nimport { showNotification } from './notificationReducer';\n\nconst reducer = (state = [], action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      return action.data;\n\n    default:\n      return state;\n  }\n};\n\nexport const addBlog = ({\n  author,\n  title,\n  url\n}) => {\n  return async dispatch => {\n    blogService.post({\n      author,\n      title,\n      url\n    }).then(e => {\n      dispatch({\n        type: 'ADD',\n        data: e\n      });\n      dispatch(showNotification({\n        type: 'success',\n        text: 'Blogi lisätty!',\n        duration: 5000,\n        visible: true\n      }));\n    }).catch(e => {\n      dispatch(showNotification({\n        type: 'success',\n        text: e.response ? e.response.data.error : 'Jotain meni vikaan :('\n      }));\n    });\n  };\n};\nexport const like = blog => {\n  return async dispatch => {\n    blogService.put({ ...blog,\n      likes: blog.likes + 1\n    }).then(() => {\n      dispatch({\n        type: 'LIKE',\n        data: {\n          id: blog.id\n        }\n      });\n      dispatch(showNotification({\n        type: 'success',\n        text: 'Tykätty!',\n        duration: 5000,\n        visible: true\n      }));\n    }).catch(() => {\n      dispatch(showNotification({\n        type: 'alert',\n        text: 'Tykkääminen meni pieleen!',\n        duration: 5000,\n        visible: true\n      }));\n    });\n  };\n};\nexport const deleteBlog = id => {\n  return async dispatch => {\n    blogService.deleteBlog(id).then(() => {\n      // let new_blogs = blogs.filter(e => e.id !== id)\n      // setBlogs(new_blogs)\n      dispatch({\n        type: 'LIKE',\n        data: {\n          id\n        }\n      });\n      dispatch(showNotification({\n        type: 'success',\n        text: 'Poistettu!',\n        duration: 5000,\n        visible: true\n      }));\n    }).catch(() => {\n      dispatch(showNotification({\n        type: 'alert',\n        text: 'Poistaminen meni pieleen!',\n        duration: 5000,\n        visible: true\n      }));\n    });\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    blogService.getAll().then(blogs => {\n      dispatch({\n        type: 'INIT',\n        data: blogs\n      });\n    });\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/akukettunen/Desktop/FS2021/osa7/bloglist-extended/src/reducers/userReducer.js"],"names":["blogService","showNotification","reducer","state","action","type","data","addBlog","author","title","url","dispatch","post","then","e","text","duration","visible","catch","response","error","like","blog","put","likes","id","deleteBlog","initBlogs","getAll","blogs"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\nimport { showNotification } from './notificationReducer'\n\nconst reducer = (state = [], action) => {\n  switch(action.type) {\n    case 'LOGIN':\n      return action.data\n    default:\n\n    return state\n  }\n}\n\nexport const addBlog = ({ author, title, url }) => {\n  return async dispatch => {\n    blogService.post({ author, title, url })\n      .then(e => {\n        dispatch({ type: 'ADD', data: e })\n        dispatch(showNotification({ type: 'success', text: 'Blogi lisätty!', duration: 5000, visible: true }))\n      })\n      .catch(e => {\n        dispatch(showNotification({ type: 'success', text: e.response ? e.response.data.error : 'Jotain meni vikaan :(' }))\n      })\n  }\n}\n\nexport const like = (blog) => {\n  return async dispatch => {\n    blogService.put({ ...blog, likes: blog.likes + 1 })\n      .then(() => {\n        dispatch({\n          type: 'LIKE',\n          data: { id: blog.id }\n        })\n\n        dispatch(showNotification({ type: 'success', text: 'Tykätty!', duration: 5000, visible: true }))\n      })\n      .catch(() => {\n        dispatch(showNotification({ type: 'alert', text: 'Tykkääminen meni pieleen!', duration: 5000, visible: true  }))\n      })\n\n  }\n}\n\nexport const deleteBlog = (id) => {\n  return async dispatch => {\n    blogService.deleteBlog(id)\n      .then(() => {\n        // let new_blogs = blogs.filter(e => e.id !== id)\n        // setBlogs(new_blogs)\n        dispatch({\n          type: 'LIKE',\n          data: { id }\n        })\n        dispatch(showNotification({ type: 'success', text: 'Poistettu!', duration: 5000, visible: true }))\n      })\n      .catch(() => {\n        dispatch(showNotification({ type: 'alert', text: 'Poistaminen meni pieleen!', duration: 5000, visible: true  }))\n      })\n  }\n}\n\nexport const initBlogs = () => {\n  return async dispatch => {\n    blogService.getAll().then(blogs => {\n      dispatch({\n        type: 'INIT',\n        data: blogs\n      })\n    })\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}