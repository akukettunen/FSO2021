{"ast":null,"code":"import blogService from '../services/blogs';\nimport { showNotification } from './notificationReducer';\n\nconst reducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD':\n      return [...state, action.data];\n\n    case 'INIT':\n      return action.data;\n\n    case 'LIKE':\n      {\n        let new_blogs = [...state];\n        let index = new_blogs.findIndex(e => e.id === action.data.id);\n        if (index < 0) throw 'Blogia ei löydy!';\n        new_blogs[index].likes = new_blogs[index]['likes'] + 1;\n        return new_blogs;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addBlog = ({\n  author,\n  title,\n  url\n}) => {\n  return async dispatch => {\n    blogService.post({\n      author,\n      title,\n      url\n    }).then(e => {\n      dispatch({\n        type: 'ADD',\n        data: e\n      });\n      dispatch(showNotification({\n        type: 'success',\n        text: 'Blogi lisätty!',\n        duration: 5000,\n        visible: true\n      }));\n    }).catch(e => {\n      dispatch(showNotification({\n        type: 'success',\n        text: e.response ? e.response.data.error : 'Jotain meni vikaan :('\n      }));\n    });\n  };\n};\nexport const likeBlog = blog => {\n  return async dispatch => {\n    blogService.put({ ...blog,\n      likes: blog.likes + 1\n    }).then(() => {\n      dispatch({\n        type: 'LIKE',\n        data: {\n          id: blog.id\n        }\n      });\n      dispatch(showNotification({\n        type: 'success',\n        text: 'Tykätty!',\n        duration: 5000,\n        visible: true\n      }));\n    }).catch(() => {\n      dispatch(showNotification({\n        type: 'alert',\n        text: 'Tykkääminen meni pieleen!'\n      }));\n    });\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    blogService.getAll().then(blogs => {\n      dispatch({\n        type: 'INIT',\n        data: blogs\n      });\n    });\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/akukettunen/Desktop/FS2021/osa7/bloglist-extended/src/reducers/blogReducer.js"],"names":["blogService","showNotification","reducer","state","action","type","data","new_blogs","index","findIndex","e","id","likes","addBlog","author","title","url","dispatch","post","then","text","duration","visible","catch","response","error","likeBlog","blog","put","initBlogs","getAll","blogs"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\nimport { showNotification } from './notificationReducer'\n\nconst reducer = (state = [], action) => {\n  switch(action.type) {\n    case 'ADD':\n      return [...state, action.data]\n    case 'INIT':\n      return action.data\n    case 'LIKE': {\n      let new_blogs = [...state]\n      let index = new_blogs.findIndex(e => e.id === action.data.id)\n      if(index < 0) throw 'Blogia ei löydy!'\n      new_blogs[index].likes = new_blogs[index]['likes'] + 1\n      return new_blogs\n    }\n    default:\n\n    return state\n  }\n}\n\nexport const addBlog = ({ author, title, url }) => {\n  return async dispatch => {\n    blogService.post({ author, title, url })\n      .then(e => {\n        dispatch({ type: 'ADD', data: e })\n        dispatch(showNotification({ type: 'success', text: 'Blogi lisätty!', duration: 5000, visible: true }))\n      })\n      .catch(e => {\n        dispatch(showNotification({ type: 'success', text: e.response ? e.response.data.error : 'Jotain meni vikaan :(' }))\n      })\n  }\n}\n\nexport const likeBlog = (blog) => {\n  return async dispatch => {\n    blogService.put({ ...blog, likes: blog.likes + 1 })\n      .then(() => {\n        dispatch({\n          type: 'LIKE',\n          data: { id: blog.id }\n        })\n\n        dispatch(showNotification({ type: 'success', text: 'Tykätty!', duration: 5000, visible: true }))\n      })\n      .catch(() => {\n        dispatch(showNotification({ type: 'alert', text: 'Tykkääminen meni pieleen!' }))\n      })\n\n  }\n}\n\nexport const initBlogs = () => {\n  return async dispatch => {\n    blogService.getAll().then(blogs => {\n      dispatch({\n        type: 'INIT',\n        data: blogs\n      })\n    })\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}